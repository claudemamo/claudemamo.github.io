<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jax Ws on On Code &amp; Design</title>
    <link>https://claudemamo.github.io/tags/jax-ws/</link>
    <description>Recent content in Jax Ws on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Dec 2012 07:56:00 +0000</lastBuildDate>
    <atom:link href="https://claudemamo.github.io/tags/jax-ws/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Demystifying Apache CXF: A Hello World App</title>
      <link>https://claudemamo.github.io/2012/12/19/demystifying-apache-cxf-a-hello-world-app/</link>
      <pubDate>Wed, 19 Dec 2012 07:56:00 +0000</pubDate>
      
      <guid>https://claudemamo.github.io/2012/12/19/demystifying-apache-cxf-a-hello-world-app/</guid>
      <description>&lt;p&gt;&amp;ldquo;&lt;i&gt;CXF scares the sh**t out of me!&lt;/i&gt;&amp;rdquo;.&amp;nbsp;This was a client&amp;rsquo;s comment during our discussion on&amp;nbsp;&lt;a href=&#34;http://cxf.apache.org/&#34; target=&#34;_blank&#34;&gt;Apache CXF&lt;/a&gt; and I think it&amp;rsquo;s a feeling shared by many. This feeling usually arises from a complaint I hear on CXF: the lack of documentation. However, I suspect that CXF&amp;rsquo;s flexibility confuses numerous newbies and therefore contributes to the negative feelings towards it.&amp;nbsp;The bad news is that, for some, it&amp;rsquo;s hard to live without CXF. Popular open source software such as Apache Camel, Mule, and JBoss AS rely on CXF for their out-of-the-box web service support.&lt;br /&gt;&lt;br /&gt;With the hope of increasing the understanding of Apache CXF, I&amp;rsquo;ve decided to publish the first of a series of how-tos. Each how-to demonstrates how to accomplish a particular task in CXF. For example, in this one I&amp;rsquo;ll show how to publish a SOAP&amp;nbsp;over HTTP&amp;nbsp;Web Service.&amp;nbsp;Throughout the how-tos, I will assume you have knowledge of basic Java and web services (e.g., SOAP, WSDL, REST). I will also assume you have knowledge of Maven. Maven is the tool I use for setting up dependencies, build and run the apps described by the how-tos. Don&amp;rsquo;t worry, I&amp;rsquo;ll make the apps available on &lt;a href=&#34;https://github.com/claudemamo&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; :-).&lt;br /&gt;&lt;br /&gt;Before getting our hands dirty with this how-to, I&amp;rsquo;ll give a 10,000 foot view of Apache CXF for those who are new to the framework. The following is its definition taken from CXF&amp;rsquo;s official website:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;p1&#34;&gt;&amp;ldquo;&lt;i&gt;Apache CXF is an open source services &lt;/i&gt;[Java]&lt;i&gt; framework. CXF helps you &lt;/i&gt;&lt;b style=&#34;font-style: italic;&#34;&gt;build and develop services&lt;/b&gt;&lt;i&gt; using &lt;/i&gt;&lt;b style=&#34;font-style: italic;&#34;&gt;frontend programming APIs&lt;/b&gt;&lt;i&gt;, like JAX-WS and JAX-RS. These services can speak a variety of &lt;/i&gt;&lt;b style=&#34;font-style: italic;&#34;&gt;protocols&lt;/b&gt;&lt;i&gt; such as SOAP, XML/HTTP, RESTful HTTP, or CORBA and work over a variety of &lt;/i&gt;&lt;b style=&#34;font-style: italic;&#34;&gt;transports&lt;/b&gt;&lt;i&gt; such as HTTP, JMS or JBI.&lt;/i&gt;&amp;ldquo;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;In other words, with CXF, we can mix and match frontend APIs [1], protocols and transports to implement a service. For instance, we can instruct CXF to expose a Java application&amp;rsquo;s interface as a WSDL and have the app talk with clients using CORBA over IIOP. But CXF is not just used to &amp;ldquo;build and develop services&amp;rdquo;. We can also use CXF to build and develop service clients such as a SOAP consumer [2].&lt;br /&gt;&lt;br /&gt;Now that we have an idea of what CXF is, let&amp;rsquo;s follow the &lt;a href=&#34;https://github.com/claudemamo/cxf-howto-1&#34; target=&#34;_blank&#34;&gt;first how-to&lt;/a&gt;: Publish a&amp;nbsp;SOAP over HTTP Web Service&amp;nbsp;that takes in a string and returns &amp;ldquo;Hello&amp;rdquo; with the input string appended to it.&lt;br /&gt;&lt;br /&gt;I have the following class:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4306173.js?file=HelloWorldImpl(1).java&#34;&gt;&lt;/script&gt;I want the class&amp;nbsp;to be exposed to the outside world as a Web Service. That is, I want to have:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;a WSDL that reflects the class interface and is accessible to clients&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;SOAP requests translated into object method invocations and method results translated into SOAP replies.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;With CXF, different approaches exist for doing the above. In this post, I&amp;rsquo;ll cover the standard approach and leverage CXF&amp;rsquo;s support for JAX-WS. In the Java world, &lt;a href=&#34;http://en.wikipedia.org/wiki/Java_API_for_XML_Web_Services&#34; target=&#34;_blank&#34;&gt;JAX-WS&lt;/a&gt; is a spec for mapping a class to a SOAP Web Service. I map &lt;i&gt;HelloWorldImpl&lt;/i&gt; by adding annotations to it:&lt;/div&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4306173.js?file=HelloWorldImpl(2).java&#34;&gt;&lt;/script&gt;The JAX-WS annotations in the class instruct the JAX-WS provider (i.e., CXF) to:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Expose HelloWorldImpl as a Web Service (@WebService)&lt;/li&gt;&lt;li&gt;Set the parameter name in the WSDL to &amp;ldquo;text&amp;rdquo; (@WebParam(name = &amp;ldquo;text&amp;rdquo;)) [3].&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;The next step is to launch the Web Service so I can process SOAP requests.&amp;nbsp;One strategy for launching the Web Service is to deploy the app onto a web container such as Tomcat. But this requires quite a bit of setup. I&amp;rsquo;d like to keep things simple for this first how-to. JAX-WS provides an easy way for launching the Web Service from within your application [4]:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4306173.js?file=Sever.java&#34;&gt;&lt;/script&gt;&lt;i&gt;Endpoint.publish(&amp;hellip;)&lt;/i&gt; tells the JAX-WS provider to start an embedded web server (&lt;a href=&#34;http://jetty.codehaus.org/jetty/&#34; target=&#34;_blank&#34;&gt;Jetty&lt;/a&gt; for CXF) on a different thread. I give the method a URL from where the Web Service will be operating on&amp;nbsp;and the class to be published as a Web Service.&lt;br /&gt;&lt;br /&gt;What happens if I try to run the app without including the CXF libraries in the Java classpath? It will actually run without a hitch, that is, the Web Service will start up.&amp;nbsp;The problem&amp;nbsp;is I won&amp;rsquo;t be using CXF as the JAX-WS provider. If you&amp;rsquo;re using the Oracle JDK, &lt;a href=&#34;http://jax-ws.java.net/&#34; target=&#34;_blank&#34;&gt;JAX-WS RI&lt;/a&gt; is the default JAX-WS provider since it comes bundled with the JDK. Changing from JAX-WS RI to CXF is just a matter of declaring two CXF dependencies in the POM file:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4306173.js?file=pom.xml&#34;&gt;&lt;/script&gt;To test the Web Service, from your console, goto the project&amp;rsquo;s root directory and type:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4306173.js?file=run.sh&#34;&gt;&lt;/script&gt; &lt;div style=&#34;text-align: justify;&#34;&gt;Accessing &lt;i&gt;&lt;a href=&#34;http://localhost:9000/helloWorld?wsdl&#34;&gt;http://localhost:9000/helloWorld?wsdl&lt;/a&gt;&lt;/i&gt; from your browser should bring up the Web Service&amp;rsquo;s WSDL. &lt;br /&gt;&lt;span style=&#34;font-family: Times, Times New Roman, serif; font-size: small;&#34;&gt;&lt;span class=&#34;num&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;font-family: Times, Times New Roman, serif; font-size: small;&#34;&gt;&lt;span class=&#34;num&#34;&gt;1:&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;A frontend programming API is an API for mapping your application interface (e.g., Java interface) to a different interface (e.g., RESTful).&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: Times, Times New Roman, serif; font-size: small;&#34;&gt;2: Funnily enough, this isn&amp;rsquo;t mentioned in the definition.&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: Times, Times New Roman, serif; font-size: small;&#34;&gt;&lt;span class=&#34;num&#34;&gt;3:&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;&lt;a href=&#34;http://cxf.apache.org/faq.html#FAQ-Thepartsinmygeneratedwsdlhavenamesoftheform%22arg0%22%2C%22arg1%22%2C...Whydon%27ttheparts%28andJavageneratedfromthem%29usetheniceparameternamesItypedintotheinterfacedefinition%3F&#34;&gt;@WebParam is required&lt;/a&gt; because a JAX-WS provider cannot deduce the parameter name from the compiled code in some situations.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: Times, Times New Roman, serif; font-size: small;&#34;&gt;4: Note that I&amp;rsquo;m not saying this is the suggested approach for a production environment. Even though it takes more time to setup, a web container offers several advantages over an embedded approach.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>