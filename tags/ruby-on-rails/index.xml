<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby On Rails on On Code &amp; Design</title>
    <link>http://www.oncodesign.io/tags/ruby-on-rails/</link>
    <description>Recent content in Ruby On Rails on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Feb 2014 16:53:00 +0000</lastBuildDate>
    <atom:link href="http://www.oncodesign.io/tags/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dynamically Create BitCoin Wallets &amp; Payment Pages on Coinbase in Ruby</title>
      <link>http://www.oncodesign.io/2014/02/11/dynamically-create-bitcoin-wallets--payment-pages-on-coinbase-in-ruby/</link>
      <pubDate>Tue, 11 Feb 2014 16:53:00 +0000</pubDate>
      
      <guid>http://www.oncodesign.io/2014/02/11/dynamically-create-bitcoin-wallets--payment-pages-on-coinbase-in-ruby/</guid>
      <description>&lt;p&gt;Last weekend, as part of my new year&amp;rsquo;s resolution to dedicate some time to good causes, I participated in &lt;a href=&#34;http://hack4good.io/&#34; target=&#34;_blank&#34;&gt;Hack4good&lt;/a&gt;: a global 48 hour hackathon aimed at bringing ideas for the social good into life. In Malta, our team brought forward a crowd funding solution for charitable fundraisers with &lt;b&gt;minimal&lt;/b&gt; transaction fees. To this end, we selected &lt;a href=&#34;https://www.youtube.com/watch?v=Um63OQz3bjo&#34; target=&#34;_blank&#34;&gt;BitCoin&lt;/a&gt; as the donation currency and &lt;a href=&#34;https://coinbase.com/&#34; target=&#34;_blank&#34;&gt;Coinbase&lt;/a&gt; to host fundraise donations.&lt;br /&gt;&lt;br /&gt;One requirement in our project was to have Coinbase automatically issue a BitCoin wallet to each&amp;nbsp;fundraiser. To further complicate matters, we wanted to generate a Coinbase payment page that allows the donor to&amp;nbsp;transfer his BitCoins to the fundraiser&amp;rsquo;s wallet:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-9URc-UR2bBg/UvouzVJqjUI/AAAAAAAAAHY/VTX_OUmsRW4/s1600/coinbase-payment-page.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://1.bp.blogspot.com/-9URc-UR2bBg/UvouzVJqjUI/AAAAAAAAAHY/VTX_OUmsRW4/s1600/coinbase-payment-page.png&#34; height=&#34;400&#34; width=&#34;392&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;a href=&#34;https://coinbase.com/api/doc&#34; target=&#34;_blank&#34;&gt;Coinbase&amp;rsquo;s awesome API&lt;/a&gt; permitted us to do both things with very little effort. Since we developed the solution in Ruby on Rails 4, I&amp;rsquo;ll show you the code of how we accomplished this using a &lt;a href=&#34;https://github.com/claudemamo/coinbase-ruby&#34; target=&#34;_blank&#34;&gt;forked version of Coinbase API&amp;rsquo;s Ruby client&lt;/a&gt; [1]:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/8918100.js?file=fundraiser_controller(1).rb&#34;&gt;&lt;/script&gt;The&amp;nbsp;&lt;i&gt;create()&lt;/i&gt;&amp;nbsp;controller action does numerous things so let&amp;rsquo;s dissect it piece by piece. The action instantiates the Coinbase client with our API key: this key is created in Coinbase&amp;rsquo;s account settings page. The client object&amp;rsquo;s &lt;i&gt;create_user(&amp;hellip;)&lt;/i&gt; method is then invoked to make a wallet in addition to a Coinbase account for the fundraiser. The email address and password parameters are used by the end-user to access his fundraiser wallet on Coinbase. &lt;i&gt;COINBASE_CLIENT_SECRET&lt;/i&gt;, linked to our API key, is passed as a parameter so that we can automatically grant ourselves merchant permissions on the created user account. These permissions are needed to dynamically generate the payment page on behalf of the user.&lt;br /&gt;&lt;br /&gt;Making the call to Coinbase to generate the payment page requires that we follow the OAuth 2 protocol [2]. Fortunately, an&amp;nbsp;&lt;a href=&#34;https://rubygems.org/gems/oauth2&#34; target=&#34;_blank&#34;&gt;OAuth 2 Ruby library&lt;/a&gt; exists. So we go ahead and use the library to instantiate an OAuth client, passing &lt;i&gt;COINBASE_API_KEY&lt;/i&gt; and &lt;i&gt;COINBASE_API_SECRET&lt;/i&gt; as parameters. Before we ask Coinbase to create a payment page on the user&amp;rsquo;s behalf, an&amp;nbsp;&lt;i&gt;AccessToken&lt;/i&gt; object is constructed with the access token obtained from&amp;nbsp;&lt;i&gt;coinbase&lt;/i&gt;.&lt;i&gt;create_user(&amp;hellip;)&lt;/i&gt;&amp;nbsp;and the OAuth client we have just instantiated. After this, we use the newly constructed&amp;nbsp;&lt;i&gt;oauth_token&lt;/i&gt;&amp;nbsp;object to post a request to&amp;nbsp;&lt;i&gt;&lt;a href=&#34;https://coinbase.com/api/v1/buttons&#34;&gt;https://coinbase.com/api/v1/buttons&lt;/a&gt;.&lt;/i&gt;&amp;nbsp;Note that &lt;i&gt;JSON_CREATE_PAYMENT_PAGE&lt;/i&gt;&amp;rsquo;s value is sent as the HTTP body.&lt;br /&gt;&lt;br /&gt;All I need from the JSON response returned from the API call is the payment page code. This code lets Coinbase know which payment page to display. We persist this code along with the fundraiser details so that we can retrieve them later when we show the fundraiser to a potential donor:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/8918100.js?file=fundraiser_controller(2).rb&#34;&gt;&lt;/script&gt;Here is view associated with the above action:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/8918100.js?file=show.html.erb&#34;&gt;&lt;/script&gt;The view gets the page code from&amp;nbsp;&lt;i&gt;@fundraiser.coinbase_page_code&lt;/i&gt; and sets the necessary HTML attributes with this value. &lt;i&gt;button.js&lt;/i&gt;&amp;nbsp;is a script provided by Coinbase that styles the anchor element and opens the fundraising donation page tied to the page code when the anchor is clicked:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-216Y0Y3NHe8/Uvoo9rAJu5I/AAAAAAAAAHM/yQWlxI-KSEE/s1600/donation_large.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-216Y0Y3NHe8/Uvoo9rAJu5I/AAAAAAAAAHM/yQWlxI-KSEE/s1600/donation_large.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The final step is to add the OAuth 2 and Coinbase dependencies to the project Gemfile:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/8918100.js?file=Gemfile&#34;&gt;&lt;/script&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;span class=&#34;num&#34; style=&#34;font-family: Times, &#39;Times New Roman&#39;, serif;&#34;&gt;1: We forked &lt;a href=&#34;https://github.com/coinbase/coinbase-ruby&#34; target=&#34;_blank&#34;&gt;Coinbase&amp;rsquo;s Ruby client&lt;/a&gt; because &lt;i&gt;create_user(&amp;hellip;)&lt;/i&gt;&amp;nbsp;didn&amp;rsquo;t support&amp;nbsp;&lt;a href=&#34;https://coinbase.com/api/doc/1.0/users/create.html&#34; target=&#34;_blank&#34;&gt;client ID&lt;/a&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;span class=&#34;num&#34; style=&#34;font-family: Times, &#39;Times New Roman&#39;, serif;&#34;&gt;2: You need to register your application on Coinbase before you can gain rights to manage user accounts through OAuth.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Rails Way to Search Filtering</title>
      <link>http://www.oncodesign.io/2013/07/24/the-rails-way-to-search-filtering/</link>
      <pubDate>Wed, 24 Jul 2013 12:59:00 +0000</pubDate>
      
      <guid>http://www.oncodesign.io/2013/07/24/the-rails-way-to-search-filtering/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while since my last post. Numerous changes took place in my professional life since then. I decided to take a break from my career and focus my energy to learning new technologies outside my area of expertise. One biggie is &lt;a href=&#34;http://rubyonrails.org/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;Ruby on Rails&lt;/a&gt;&amp;nbsp;3.&lt;br /&gt;&lt;br /&gt;To test my RoR as well as my UI skills, I created&amp;nbsp;&lt;a href=&#34;http://www.evplore.com/&#34; target=&#34;_blank&#34;&gt;evplore.com&lt;/a&gt;: a website for sharing, discovering and creating events. A requirement for evplore is to allow users to filter events by country, locality, tag, or date as shown below:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-W0wPU-qx8BQ/Ue6pRLSZDoI/AAAAAAAAAF8/hs7qO3SM1Ic/s1600/search-filters.png&#34; imageanchor=&#34;1&#34; style=&#34;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-W0wPU-qx8BQ/Ue6pRLSZDoI/AAAAAAAAAF8/hs7qO3SM1Ic/s640/search-filters.png&#34; height=&#34;436&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;Before delving into the nitty-gritty of implementing search filtering, let&amp;rsquo;s have a glance at the &lt;i&gt;EventsController&lt;/i&gt;:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6060780.js?file=events_controller.rb&#34;&gt;&lt;/script&gt;The controller&amp;nbsp;does what you might expect: it invokes the &lt;i&gt;Event&lt;/i&gt; model&amp;rsquo;s &lt;i&gt;find&lt;/i&gt; method to retrieve the events that match the user&amp;rsquo;s search criteria.&lt;br /&gt;&lt;br /&gt;Here&amp;rsquo;s a dirty way of implementing the &lt;i&gt;find&lt;/i&gt; method inside the &lt;i&gt;Event&lt;/i&gt;&amp;nbsp;model:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6060780.js?file=event.rb&#34;&gt;&lt;/script&gt;Any programmer worth his salt will note that this solution is tough to maintain. The&amp;nbsp;&lt;i&gt;find&lt;/i&gt;&amp;nbsp;method has a branch for every possible way the user can apply search filters&amp;nbsp;(in all 2^n branches). Having more than a few filters causes an explosion in the number of&amp;nbsp;&lt;i&gt;elsif&lt;/i&gt;&amp;nbsp;branches.&lt;br /&gt;&lt;br /&gt;The Rails way to solving this problem is to use &lt;b&gt;query chaining&lt;/b&gt;&amp;nbsp;along with the &lt;i&gt;scoped&lt;/i&gt; method:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6060780.js?file=event(2).rb&#34;&gt;&lt;/script&gt;The &lt;i&gt;Event&lt;/i&gt; model now avoids issuing a different query for each way search filters are applied. Instead, every query corresponding to a filter is put in its own class method. All methods do the same thing more or less. For example, &lt;i&gt;in_country&lt;/i&gt; takes as a parameter the country submitted by the user. If the parameter is&amp;nbsp;&lt;i&gt;nil&lt;/i&gt;&amp;nbsp;or blank, this means the user did not submit a country filter so the method should skip the query and return the relation as is: this is what the&amp;nbsp;&lt;i&gt;scoped&lt;/i&gt;&amp;nbsp;method is for. Otherwise, the filter query is applied on the current relation and the new relation is returned.&lt;br /&gt;&lt;br /&gt;What&amp;rsquo;s left is for the &lt;i&gt;EventsController &lt;/i&gt;to chain together the query methods&amp;nbsp;so that the result of each query is passed on to the next query method for further filtering:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6060780.js?file=events_controller(2).rb&#34;&gt;&lt;/script&gt;The complete code for this demo is available on &lt;a href=&#34;https://github.com/claudemamo/search-filters&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>