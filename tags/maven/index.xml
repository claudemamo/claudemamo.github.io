<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maven on On Code &amp; Design</title>
    <link>http://oncodesign.io/tags/maven/</link>
    <description>Recent content in Maven on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Oct 2012 18:23:00 +0000</lastBuildDate>
    <atom:link href="http://oncodesign.io/tags/maven/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Testing Web Services from JUnit using SoapUI</title>
      <link>http://oncodesign.io/2012/10/22/testing-web-services-from-junit-using-soapui/</link>
      <pubDate>Mon, 22 Oct 2012 18:23:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2012/10/22/testing-web-services-from-junit-using-soapui/</guid>
      <description>&lt;p&gt;There is no doubt that &lt;a href=&#34;http://www.soapui.org/&#34;&gt;SoapUI&lt;/a&gt; is a superb tool for testing Web Services. Yet, some people&amp;nbsp;seem to think that SoapUI is&amp;nbsp;just&amp;nbsp;used for manual testing.&amp;nbsp;In addition to manual tests, SoapUI supports automated tests, that is, test suites. Test suites are a step in the right direction towards automation but running them still requires human intervention. In other words, the user still has to launch SoapUI and click on the &amp;ldquo;Run&amp;hellip;&amp;rdquo; button.&amp;nbsp;This doesn&amp;rsquo;t go down well in a&amp;nbsp;&lt;a href=&#34;http://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;CI&lt;/a&gt; environment.&lt;br /&gt;&lt;br /&gt;Since SoapUI is a Java application, test suites can be invoked directly from JUnit removing the need for human intervention. On my GitHub page, I&amp;rsquo;ve uploaded a &lt;a href=&#34;https://github.com/claudemamo/soapui-junit&#34;&gt;project&lt;/a&gt; that demonstrates how to do this. The project has a JUnit test case that launches a SoapUI mock Web Service and then invokes the test suite for it. Let me give a brief overview on how I went about developing the project.&lt;br /&gt;&lt;br /&gt;The first step was to set up a SoapUI project and test suite based on a WSDL.&amp;nbsp;There&amp;rsquo;s plenty of &lt;a href=&#34;http://www.soapui.org/Functional-Testing/structuring-and-running-tests.html&#34;&gt;documentation&lt;/a&gt; online on how to do this. In the test suite, I created a test case for each WSDL operation:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-E8Gm5gHhTQ8/UIOr6msI7PI/AAAAAAAAADk/aUTSXKzPQDg/s1600/calculator-ws-test-suite.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;http://1.bp.blogspot.com/-E8Gm5gHhTQ8/UIOr6msI7PI/AAAAAAAAADk/aUTSXKzPQDg/s400/calculator-ws-test-suite.png&#34; width=&#34;393&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;For every test case, I asserted that the SOAP response isn&amp;rsquo;t a SOAP fault, complies with the schema, it&amp;rsquo;s a valid SOAP response and the outcome of the operation is correct:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-xsIDeASGSDA/UIOtkDZ-HvI/AAAAAAAAAD4/dzuz9_53nrI/s1600/add-operation-test-case.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;335&#34; src=&#34;http://2.bp.blogspot.com/-xsIDeASGSDA/UIOtkDZ-HvI/AAAAAAAAAD4/dzuz9_53nrI/s400/add-operation-test-case.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;The next step was to create a mock Web Service in the same project so I have something to run the test suite against. Again, there is &lt;a href=&#34;http://www.soapui.org/Getting-Started/mock-services.html&#34;&gt;documentation&lt;/a&gt; out there on this.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-3pfxvgi8E-w/UIPgEOx2nBI/AAAAAAAAAEI/A2b9rD42uVw/s1600/mock-ws.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;342&#34; src=&#34;http://2.bp.blogspot.com/-3pfxvgi8E-w/UIPgEOx2nBI/AAAAAAAAAEI/A2b9rD42uVw/s400/mock-ws.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Now it was time to start developing the JUnit test case. I could have imported into my Java project the SoapUI libraries from the SoapUI distribution. But being a sadist, I decided to use Maven : P.&amp;nbsp;In the project&amp;rsquo;s POM, I declared the repo where to find SoapUI and its dependencies:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/3914958.js?file=pom-1.xml&#34;&gt;&lt;/script&gt; I then declared the dependencies that I want to be retrieved and included in the classpath:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/3914958.js?file=pom-2.xml&#34;&gt;&lt;/script&gt; The last step was to write the test for my Web Service:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/3914958.js?file=CalculatorServiceTestCase.java&#34;&gt;&lt;/script&gt;&lt;i&gt; testCalculatorService&lt;/i&gt; is annotated with &lt;i&gt;@Test&lt;/i&gt; which instructs the JUnit runner to execute the test. What the test does is simple:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;It loads the test suite and mock Web Service configurations from the SoapUI project &lt;i&gt;calculator-soapui-project.xml&lt;/i&gt;&lt;/li&gt;&lt;li&gt;Launch the mock Web Service&lt;/li&gt;&lt;li&gt;Execute the test suite&lt;/li&gt;&lt;/ol&gt;You can run the test by typing in your console &amp;ldquo;mvn test&amp;rdquo; in the project root directory.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>