<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jruby on On Code &amp; Design</title>
    <link>https://claudemamo.github.io/tags/jruby/</link>
    <description>Recent content in Jruby on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Aug 2013 11:41:00 +0000</lastBuildDate>
    <atom:link href="https://claudemamo.github.io/tags/jruby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JRuby Complex Classes in Java Method Signatures</title>
      <link>https://claudemamo.github.io/2013/08/19/jruby-complex-classes-in-java-method-signatures/</link>
      <pubDate>Mon, 19 Aug 2013 11:41:00 +0000</pubDate>
      
      <guid>https://claudemamo.github.io/2013/08/19/jruby-complex-classes-in-java-method-signatures/</guid>
      <description>&lt;p&gt;As documented in the JRuby wiki,&amp;nbsp;&lt;i&gt;&lt;a href=&#34;https://github.com/jruby/jruby/wiki/GeneratingJavaClasses#generating-java-classes-ahead-of-time&#34; target=&#34;_blank&#34;&gt;java_signature&lt;/a&gt;&lt;/i&gt;&amp;nbsp;changes a method&amp;rsquo;s signature to match the signature string passed to it:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6262775.js?file=example(1).rb&#34;&gt;&lt;/script&gt;Observe that the classes in the method signature&amp;nbsp;are primitive. What if we use a complex class as a parameter type?&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6262775.js?file=example(2).rb&#34;&gt;&lt;/script&gt;Running the above code will give you the following &lt;i&gt;NoMethodError&lt;/i&gt; message:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6262775.js?file=error&#34;&gt;&lt;/script&gt; The way I went about using complex classes in signatures is to utilise&amp;nbsp;&lt;i&gt;add_method_signature&lt;/i&gt;&amp;nbsp;instead of&amp;nbsp;&lt;i&gt;java_signature&lt;/i&gt;:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6262775.js?file=example(3).rb&#34;&gt;&lt;/script&gt;&lt;i&gt;add_method_signature&lt;/i&gt;&amp;nbsp;expects the first argument to be the name of the method that will have its signature changed. For the second argument, it expects it to be a list of classes. The list&amp;rsquo;s first item is the return class (e.g.,&amp;nbsp;&lt;i&gt;void&lt;/i&gt;) while the subsequent items are the signature&amp;rsquo;s parameter classes (e.g.,&amp;nbsp;&lt;i&gt;int&lt;/i&gt; and &lt;i&gt;MyClass&lt;/i&gt;). Note that I invoke&amp;nbsp;&lt;i&gt;become_java!&lt;/i&gt;&amp;nbsp;on the complex class. This tells &lt;i&gt;MyClass&lt;/i&gt; to materialize itself into a Java class. The &lt;i&gt;false&lt;/i&gt; flag is needed so that JRuby&amp;rsquo;s main class loader is used to load the class. Without it, you&amp;rsquo;ll be greeted by a&amp;nbsp;&lt;i&gt;java.lang.ClassNotFoundException&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JRuby CXF: A Gem for Creating SOAP Web Services</title>
      <link>https://claudemamo.github.io/2013/08/10/jruby-cxf-a-gem-for-creating-soap-web-services/</link>
      <pubDate>Sat, 10 Aug 2013 20:07:00 +0000</pubDate>
      
      <guid>https://claudemamo.github.io/2013/08/10/jruby-cxf-a-gem-for-creating-soap-web-services/</guid>
      <description>&lt;p&gt;It seems to me that &lt;a href=&#34;http://www.w3.org/TR/ws-arch/&#34; target=&#34;_blank&#34;&gt;Web Services&lt;/a&gt; don&amp;rsquo;t receive much love from Rubyists. In fact, of the two Ruby projects I know that add Web Service support (&lt;a href=&#34;http://rubygems.org/gems/soap4r&#34; rel=&#34;&#34; target=&#34;_blank&#34;&gt;SOAP4R&lt;/a&gt; and &lt;a href=&#34;http://rubygems.org/gems/actionwebservice&#34; target=&#34;_blank&#34;&gt;ActionWebService&lt;/a&gt;), both appear to be inactive. Someone might say that if Web Services are a must, then avoid Ruby or put an &lt;a href=&#34;http://www.mulesoft.org/&#34; target=&#34;_blank&#34;&gt;integration layer&lt;/a&gt; between your Ruby application and the client/service. From my experience, life is not always that simple and these solutions might not be applicable.&amp;nbsp; &lt;br /&gt;&lt;br /&gt;The Java ecosystem has a popular and well-supported open source project that is used to build SOAP Web Services and clients. This project is called &lt;a href=&#34;http://cxf.apache.org/&#34; target=&#34;_blank&#34;&gt;Apache CXF&lt;/a&gt;. On one fine sunny day I asked myself: &amp;ldquo;Wouldn&amp;rsquo;t it be great if I could publish a Web Service from Ruby using Apache CXF?&amp;rdquo;. Almost immediately I put that thought away. Trying to integrate a Java library into Ruby is, well, hard in my books. But then&amp;nbsp;&lt;a href=&#34;http://jruby.org/&#34; target=&#34;_blank&#34;&gt;JRuby&lt;/a&gt; popped into my mind. JRuby is the Ruby language implemented in Java. This means that Ruby and Java objects talk to each other with relative ease.&lt;br /&gt;&lt;br /&gt;Seeing the potential in the idea, last week I set about developing a &lt;a href=&#34;https://github.com/claudemamo/jruby-cxf&#34; target=&#34;_blank&#34;&gt;JRuby wrapper gem&lt;/a&gt; for CXF. I must admit it was more challenging than I thought but at the end I was happy with the results. The bulk of the work was customising the &lt;a href=&#34;http://cxf.apache.org/docs/aegis-21.html&#34; target=&#34;_blank&#34;&gt;Aegis data binder&lt;/a&gt; so that it could map &lt;i&gt;&lt;a href=&#34;http://jruby.org/apidocs/org/jruby/RubyObject.html&#34; target=&#34;_blank&#34;&gt;RubyObject&lt;/a&gt;&lt;/i&gt; instances.&lt;br /&gt;&lt;br /&gt;The first step to using the gem is installing it:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6176537.js?file=install.sh&#34;&gt;&lt;/script&gt;A &lt;a href=&#34;https://github.com/claudemamo/jruby-cxf-example&#34; target=&#34;_blank&#34;&gt;code example&lt;/a&gt; is in order here:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6176537.js?file=example(1).rb&#34;&gt;&lt;/script&gt;Publishing the above class as a Web Service means requiring the gem and including the module &lt;i&gt;CXF::WebServiceServlet&lt;/i&gt;:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6176537.js?file=example(2).rb&#34;&gt;&lt;/script&gt;Including &lt;i&gt;WebServiceServlet&lt;/i&gt; causes the class to become a regular Java servlet. This implies that any servlet container can load the Web Service. For this example, I&amp;rsquo;ll load the Web Service using an embedded Jetty:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6176537.js?file=example(3).rb&#34;&gt;&lt;/script&gt;Running the example requires two libraries to be available in the Java classpath: &lt;a href=&#34;http://archive.apache.org/dist/cxf/2.7.6/&#34; target=&#34;_blank&#34;&gt;CXF&amp;nbsp;2.7.6&lt;/a&gt; and &lt;a href=&#34;http://mirror17.pcbsd.org/Mirrors/eclipse/jetty/8.1.12.v20130726/dist/&#34; target=&#34;_blank&#34;&gt;Jetty&amp;nbsp;8&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6176537.js?file=run-example.sh&#34;&gt;&lt;/script&gt;Accessing the URL &lt;i&gt;&lt;a href=&#34;http://localhost:8080/hello-world?wsdl&#34;&gt;http://localhost:8080/hello-world?wsdl&lt;/a&gt;&lt;/i&gt; with a browser will display the following WSDL:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6176537.js?file=hello-world(1).wsdl&#34;&gt;&lt;/script&gt;You&amp;rsquo;ll note that the operations are missing from the WSDL. This is because I didn&amp;rsquo;t tell CXF to expose any of the methods in the class &lt;i&gt;HelloWorld&lt;/i&gt; as Web Service operations. Let me do that now:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6176537.js?file=example(4).rb&#34;&gt;&lt;/script&gt;&lt;i&gt;expose&lt;/i&gt;&amp;nbsp;tells CXF to publish the method denoted by the first argument (i.e., &lt;i&gt;:say_hello&lt;/i&gt;). The second argument in &lt;i&gt;expose&lt;/i&gt; is a map. It should have at a&amp;nbsp;&lt;b&gt;minimum&lt;/b&gt; the following entries:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&amp;nbsp;&lt;i&gt;expects&lt;/i&gt;&amp;nbsp;- maps to an ordered list of hashes where each hash corresponds to a method parameter and its expected type.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;&amp;nbsp;&lt;i&gt;returns&lt;/i&gt;&amp;nbsp;- maps to the expected return type (e.g., &lt;i&gt;:string&lt;/i&gt;).&lt;/li&gt;&lt;/ol&gt;Re-executing the example will give out this WSDL:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6176537.js?file=hello-world(2).wsdl&#34;&gt;&lt;/script&gt;The gem supports various options to customise the WSDL. For instance, the service name and namespace can be changed:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6176537.js?file=example(5).rb&#34;&gt;&lt;/script&gt;The complete list of options is found in the project repository&amp;rsquo;s&amp;nbsp;&lt;i&gt;&lt;a href=&#34;https://github.com/claudemamo/jruby-cxf/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;README&lt;/a&gt;&lt;/i&gt;&amp;nbsp;file&amp;nbsp;.&lt;br /&gt;&lt;br /&gt;Till now I&amp;rsquo;ve assumed that a Web Service operation will only accept simple types. In the real world we&amp;rsquo;re more likely to be using complex types:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6176537.js?file=example(6).rb&#34;&gt;&lt;/script&gt;I&amp;rsquo;ve added two classes in the example: &lt;i&gt;Animal&lt;/i&gt; and &lt;i&gt;Person&lt;/i&gt;.&amp;nbsp;It is necessary to include the &lt;i&gt;CXF::ComplexType&lt;/i&gt; module so that CXF can derive an XML schema from these classes and embed the schema in the WSDL. A complex type element is declared using the method &lt;i&gt;member&lt;/i&gt;. A&amp;nbsp;&lt;i&gt;member&lt;/i&gt;&amp;nbsp;needs at least a name for the element and its type. You could also declare whether a property is required as seen in the member &lt;i&gt;pet&lt;/i&gt;. The &lt;i&gt;required&lt;/i&gt; option defaults to true if not specified.&lt;br /&gt;&lt;br /&gt;Note that now &lt;i&gt;say_hello&lt;/i&gt;&amp;nbsp;and&amp;nbsp;&lt;i&gt;give_age &lt;/i&gt;are&amp;nbsp;expecting a&amp;nbsp;&lt;i&gt;Person&lt;/i&gt;&amp;nbsp;object instead of primitive types and they are accessing the object via accessors. Behind the scenes the gem creates an accessor for each member that is declared.&lt;br /&gt;&lt;br /&gt;I hope I&amp;rsquo;ve given you enough info to get started out with the gem. My plan is maintain JRuby CXF as I believe it could be useful for those who aren&amp;rsquo;t happy with the current alternatives. Of course, if you find an issue with the gem, I&amp;rsquo;d be more than happy to accept code contributions ;-).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>