<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ftp on On Code &amp; Design</title>
    <link>https://www.oncodesign.io/tags/ftp/</link>
    <description>Recent content in Ftp on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Aug 2012 10:15:00 +0000</lastBuildDate>
    <atom:link href="https://www.oncodesign.io/tags/ftp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sharing an FTP service between un-clustered Mule instances</title>
      <link>https://www.oncodesign.io/2012/08/03/sharing-an-ftp-service-between-un-clustered-mule-instances/</link>
      <pubDate>Fri, 03 Aug 2012 10:15:00 +0000</pubDate>
      
      <guid>https://www.oncodesign.io/2012/08/03/sharing-an-ftp-service-between-un-clustered-mule-instances/</guid>
      <description>&lt;p&gt;&lt;span style=&#34;background-color: white;&#34;&gt;One notorious problem&amp;nbsp;when having Mule instances &lt;b&gt;consuming&lt;/b&gt; files from the same FTP server i&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;s that it&amp;rsquo;s possibile for two or more Mule instances&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;to concurrently download the same file. This leads to duplicate messages: Mule messages representing&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;the same file in different Mule nodes.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-qLrIGlSH598/UBtred6AG7I/AAAAAAAAACc/hO0yhIi4h3A/s1600/ftp-server-unclustered.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;365&#34; src=&#34;http://3.bp.blogspot.com/-qLrIGlSH598/UBtred6AG7I/AAAAAAAAACc/hO0yhIi4h3A/s400/ftp-server-unclustered.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;The &lt;a href=&#34;http://www.mulesoft.org/documentation/display/mmc/Mule+High+Availability+(HA)+Clusters&#34; target=&#34;_blank&#34;&gt;clustering solution&lt;/a&gt; offered by Mule EE 3.2 addresses this issue by having Mule instances&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;coordinate among each other on who will download files from the FTP server.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-j5n01jCjpSQ/UjlbnyndVMI/AAAAAAAAAGU/XveenL_Xzqw/s1600/ftp-server-clustered-2.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;336&#34; src=&#34;http://4.bp.blogspot.com/-j5n01jCjpSQ/UjlbnyndVMI/AAAAAAAAAGU/XveenL_Xzqw/s400/ftp-server-clustered-2.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;br /&gt;Clustering&amp;nbsp;introduces a&lt;span style=&#34;background-color: white;&#34;&gt;n &lt;a href=&#34;http://www.hazelcast.com/&#34; target=&#34;_blank&#34;&gt;in-memory data grid&lt;/a&gt; to your Mule nodes. A&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;n in-memory data grid adds significant complexity which is fine if you intend to use it for load balancing VM queues, share router state, etc&amp;hellip; But for me, all that complexity is un-necessary if you intend to use clustering &lt;b&gt;just for the sake&lt;/b&gt; of preventing Mule instances grabbing the same file on a FTP server. It&amp;rsquo;s like hitting a nail with a sledge-hammer.&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;What&amp;rsquo;s the alternative to using a cluster?&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&amp;nbsp;The alternatives my colleagues and me came up with&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;weren&amp;rsquo;t exactly pretty and all of them involved doing some playing around inside of Mule.&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;These days I&amp;rsquo;ve been travelling which gave me time to think more clearly&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;about the problem. It turns out that a potential simple solution (&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;at the expense of a small increase in latency)&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&amp;nbsp;lies outside of Mule:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/--QVeyQCEydk/UBhjH3jSNKI/AAAAAAAAAB0/MGS5BaKGnJw/s1600/ftp-server-proxy.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;400&#34; src=&#34;http://2.bp.blogspot.com/--QVeyQCEydk/UBhjH3jSNKI/AAAAAAAAAB0/MGS5BaKGnJw/s400/ftp-server-proxy.png&#34; width=&#34;380&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;In above setup, the FTP proxy between the set of Mule instances and the FTP server is responsible for ensuring that&lt;span style=&#34;background-color: white;&#34;&gt;&amp;nbsp;a Mule node gets served a &amp;lsquo;free&amp;rsquo; file. S&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;uch a solution should be relatively easy to develop and add little complexity&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;compared to others, right? To be sure, I set about implementing the &lt;a href=&#34;https://github.com/claudemamo/mule-ftp-proxy&#34; target=&#34;_blank&#34;&gt;FTP proxy&lt;/a&gt;.&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;Luckily, most of the work was already done for me. James Healey took the trouble of developing an event-driven FTP framework in Ruby: &lt;a href=&#34;https://github.com/yob/em-ftpd&#34; target=&#34;_blank&#34;&gt;em-ftpd&lt;/a&gt;. All I had to do was to add callbacks which corresponded to FTP actions (e.g., ls, get, size, etc&amp;hellip;). After a couple of hours I got a &lt;b&gt;naive&lt;/b&gt; implementation up and running:&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/3215625.js?file=driver.rb&#34;&gt;&lt;/script&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;/span&gt;&lt;i&gt;MuleFtpProxyDriver&lt;/i&gt;&amp;nbsp;&lt;span style=&#34;background-color: white;&#34;&gt;represents a Mule FTP connection. This means that it&amp;rsquo;s&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;instantiated every time Mule attempts to do a FTP login&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;. It&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;declares two class variables:&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;i&gt;@@hidden_files&lt;/i&gt; is a list containing files Mule instances are downloading. As you will see, a Mule instance isn&amp;rsquo;t permitted to start a download on a file contained within the list. This removes the chance of having duplicate messages.&lt;/span&gt;&lt;/li&gt;&lt;br /&gt;&lt;li&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;i&gt;@@mutex&lt;/i&gt; is the lock used by the&amp;nbsp;MuleFtpProxyDriver instances to access safely &lt;i&gt;@@hidden_files&lt;/i&gt;.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span style=&#34;background-color: white;&#34;&gt;The&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;FTP server,&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&amp;nbsp;which the proxy will relay requests to, has its details passed to&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;i&gt;MuleFtpProxyDriver&lt;/i&gt;&amp;rsquo;s constructor. The constructor&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&amp;nbsp;generates a unique ID that the&amp;nbsp;&lt;/span&gt;&lt;i&gt;MuleFtpProxyDriver&lt;/i&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&amp;nbsp;instance uses to keep track of the files it&amp;rsquo;s downloading.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;The &lt;i&gt;dir_contents&lt;/i&gt; method returns the list of files in a directory. T&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;he proxy lists only files which are &amp;lsquo;free&amp;rsquo;. Therefore, Mule doesn&amp;rsquo;t attempt the download a file that is being download since it&amp;rsquo;s hidden from view.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;In the &lt;i&gt;get_file&lt;/i&gt; method, the requested file is compared against the list of hidden files. If there is a match, the proxy tells Mule that the file is unavailable. Otherwise, it transfers the file from the FTP server to Mule.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;The &lt;i&gt;delete_file&lt;/i&gt; method, in addition to deleting the file from disk, removes the file entry from&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;i&gt;@@hiddenfiles&lt;/i&gt;. This allows a new file, with the same name as the deleted file, to be downloaded.&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;The &lt;i&gt;unbind&lt;/i&gt; method is invoked whenever the FTP connection is broken or closed. It makes again visible those files which didn&amp;rsquo;t download completely.&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;background-color: white;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;As usual, instructions on configuring and running the FTP proxy are found in the &lt;a href=&#34;https://github.com/claudemamo/mule-ftp-proxy&#34; target=&#34;_blank&#34;&gt;repo&lt;/a&gt;. Try it out and l&lt;/span&gt;&lt;span style=&#34;background-color: white;&#34;&gt;et me know your thoughts about using an FTP proxy as an alternative to clustering.&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>