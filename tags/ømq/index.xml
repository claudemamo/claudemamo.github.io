<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ømq on On Code &amp; Design</title>
    <link>https://claudemamo.github.io/tags/%C3%B8mq/</link>
    <description>Recent content in Ømq on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Jan 2013 17:22:00 +0000</lastBuildDate>
    <atom:link href="https://claudemamo.github.io/tags/%C3%B8mq/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ReplyTo in ZeroMQ using WS-Addressing</title>
      <link>https://claudemamo.github.io/2013/01/27/replyto-in-zeromq-using-ws-addressing/</link>
      <pubDate>Sun, 27 Jan 2013 17:22:00 +0000</pubDate>
      
      <guid>https://claudemamo.github.io/2013/01/27/replyto-in-zeromq-using-ws-addressing/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;http://opensourcesoftwareandme.blogspot.com/2013/01/soap-over-zeromq-with-apache-cxf.html&#34; target=&#34;_blank&#34;&gt;last post&lt;/a&gt;, I mentioned how one could leverage SOAP along with WS-Addressing to implement the &lt;a href=&#34;http://www.eaipatterns.com/ReturnAddress.html&#34; target=&#34;_blank&#34;&gt;return address pattern&lt;/a&gt; in&amp;nbsp;ØMQ&amp;nbsp;(known in the JMS world as&amp;nbsp;&lt;i&gt;ReplyTo&lt;/i&gt;&amp;nbsp;and in the MSMQ world as&amp;nbsp;&lt;i&gt;ResponseQueue&lt;/i&gt;). In this post, I&amp;rsquo;ll go into more detail by giving a code example using &lt;a href=&#34;https://github.com/claudemamo/cxf-rt-transports-zeromq&#34; target=&#34;_blank&#34;&gt;CXF&amp;rsquo;s ØMQ transport&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Below is a WSDL that is similar in many respects to the WSDL of the previous post:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4577639.js?file=hello_world_addr.wsdl&#34;&gt;&lt;/script&gt;Like the other WSDL, this one declares that the service has an operation named &lt;i&gt;sayHi&lt;/i&gt;. It states that&amp;nbsp;ØMQ&amp;nbsp;is to be used for transporting the SOAP messages (line 29). Moreover, it declares the service and consumer communication parameters:&amp;nbsp;&lt;i&gt;zmq:address;&lt;/i&gt;&amp;nbsp;&lt;i&gt;zmq:serviceConfig;&lt;/i&gt;&amp;nbsp;&lt;i&gt;zmq:clientConfig&lt;/i&gt; (lines 43-45).&amp;nbsp;&lt;b&gt;Unlike&lt;/b&gt; the other WSDL, the socket types are &lt;i&gt;push&lt;/i&gt; for the client and &lt;i&gt;pull&lt;/i&gt; for the service. This means that communication between the client and service is one-way and therefore the client won&amp;rsquo;t receive a reply, at least not on the same channel. Remember, since we&amp;rsquo;re implementing return address, the service sends its reply onto a different channel.&lt;br /&gt;&lt;br /&gt;This is the shell command I entered for generating the SEI and proxy classes:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4577639.js?file=generate-client.sh&#34;&gt;&lt;/script&gt;The &lt;i&gt;-asyncMethods&lt;/i&gt; switch tells CXF&amp;rsquo;s &lt;i&gt;wsdl2java&lt;/i&gt; to generate, in the SEI, for each Web Service operation an asynchronous method in addition to a synchronous one. In the consumer implementation, I use the generated SEI:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4577639.js?file=Client.java&#34;&gt;&lt;/script&gt;&lt;i&gt;doOperation()&amp;nbsp;&lt;/i&gt;sequence of events is as follows:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Publishes the endpoint that processes the service&amp;rsquo;s async reply (line 10).&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Creates a client that has WS-Addressing enabled (lines 13-14).&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Adds the &lt;i&gt;ReplyTo&lt;/i&gt;&amp;nbsp;element &amp;nbsp;to the request&amp;rsquo;s SOAP header (lines 17-18). The element contains the callback URL that the service will read in order to know to whom it should deliver its response and how it should deliver it.&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Calls asynchronously the SEI method&amp;nbsp;&lt;i&gt;sayHiAsync()&lt;/i&gt;&amp;nbsp;(line 21).&amp;nbsp;If the consumer invokes the synchronous&amp;nbsp;method (i.e., &lt;i&gt;sayHi()&lt;/i&gt;) instead of the async one, the&amp;nbsp;consumer&amp;nbsp;would block indefinitely after sending out the request because it will wait for a reply that it will never receive.&lt;/li&gt;&lt;/ol&gt;The endpoint consuming the service&amp;rsquo;s reply is a plain Web Service:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4577639.js?file=Callback.java&#34;&gt;&lt;/script&gt;The callback terminates the program as soon as it processes the reply.&lt;br /&gt;&lt;br /&gt;I re-run &lt;i&gt;wsdl2java&lt;/i&gt;&amp;nbsp;to generate another SEI but using the following arguments:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4577639.js?file=generate-server.sh&#34;&gt;&lt;/script&gt;I use the SEI generated from the above command to implement the service:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4577639.js?file=GreeterImpl.java&#34;&gt;&lt;/script&gt;Nothing special about &lt;i&gt;GreeterImpl.java&lt;/i&gt; except the &lt;i&gt;@Addressing&lt;/i&gt; annotation. This annotation is required for CXF to process the request&amp;rsquo;s WS-Addressing headers.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Main.java&lt;/i&gt; triggers the server and consumer into action:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4577639.js?file=Main.java&#34;&gt;&lt;/script&gt;The complete application is on&amp;nbsp;&lt;a href=&#34;https://github.com/claudemamo/zmq-replyto-soap&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&amp;nbsp;The instructions for running the demo are almost identical to the ones of the previous post. First enter the following Maven command from the project&amp;rsquo;s root directory: &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4577639.js?file=build.sh&#34;&gt;&lt;/script&gt;Then run the demo using the &lt;i&gt;java&lt;/i&gt; command:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4577639.js?file=run.sh&#34;&gt;&lt;/script&gt;You should then get the following output: &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4577639.js?file=gistfile1.txt&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building ZeroMQ for Android</title>
      <link>https://claudemamo.github.io/2012/08/12/building-zeromq-for-android/</link>
      <pubDate>Sun, 12 Aug 2012 10:16:00 +0000</pubDate>
      
      <guid>https://claudemamo.github.io/2012/08/12/building-zeromq-for-android/</guid>
      <description>&lt;p&gt;This weekend I ran ZeroMQ on the Android platform. The ZeroMQ website gives &lt;a href=&#34;http://www.zeromq.org/build:android&#34; target=&#34;_blank&#34;&gt;instructions&lt;/a&gt; on how to build ZeroMQ for Android and (surprise, surprise) I got errors following them. At least I wasn&amp;rsquo;t alone. Fellow blogger &lt;a href=&#34;http://iso3103.blogspot.com/2012/05/java-zeromq-for-android.html&#34; target=&#34;_blank&#34;&gt;Victor was just as lucky as me&lt;/a&gt;. He solved these errors, and what&amp;rsquo;s even better, he created a &lt;a href=&#34;https://github.com/vperron/android-jzeromq&#34; target=&#34;_blank&#34;&gt;set of scripts&lt;/a&gt; which correctly build ZeroMQ for Android. Alas, running &amp;ldquo;&lt;i&gt;make all&lt;/i&gt;&amp;rdquo; on the project gave me the following error:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/3330498.js&#34;&gt; &lt;/script&gt; The compiler complained because it couldn&amp;rsquo;t find some &lt;a href=&#34;http://developer.android.com/tools/sdk/ndk/index.html&#34; target=&#34;_blank&#34;&gt;Android NDK&lt;/a&gt; header files which had their location changed in the latest&amp;nbsp;release of the NDK (at the time of the writing the version is R8b). This was an easy fix. I just passed some flags to the compiler specifying the new header file locations. On my GitHub page, you&amp;rsquo;ll find a &lt;a href=&#34;https://github.com/claudemamo/android-jzeromq&#34; target=&#34;_blank&#34;&gt;fork&lt;/a&gt; of Victor&amp;rsquo;s project which applies the fix. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mule meet ZeroMQ. ZeroMQ meet Mule.</title>
      <link>https://claudemamo.github.io/2012/06/24/mule-meet-zeromq.-zeromq-meet-mule./</link>
      <pubDate>Sun, 24 Jun 2012 19:17:00 +0000</pubDate>
      
      <guid>https://claudemamo.github.io/2012/06/24/mule-meet-zeromq.-zeromq-meet-mule./</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;These past few weeks I&#39;ve been experimenting with &lt;a href=&#34;http://www.zeromq.org/&#34; target=&#34;_blank&#34;&gt;ZeroMQ&lt;/a&gt;&amp;nbsp;(a.k.a. ØMQ or ZMQ). I like the idea of a library that provides you the building blocks for constructing your own messaging architecture. For example, we may want to send messages to an application that might be unavailable at times. In our system, losing some messages isn&#39;t the end of the world so we don&#39;t need to have a high degree of message reliability. A common solution for this type of problem&amp;nbsp;is to introduce a message broker, such as ActiveMQ, and let the broker worry about making sure that messages are eventually delivered to the recipient. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-jvsiYKjXCGI/T-bQS0ma4VI/AAAAAAAAAA0/sxARfTv_WYU/s1600/broker.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-jvsiYKjXCGI/T-bQS0ma4VI/AAAAAAAAAA0/sxARfTv_WYU/s1600/broker.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;The main disadvantage of this approach is that a broker adds another hop to the path of the message. Also, a broker is another point in your distributed system where things could go wrong.&lt;br /&gt;&lt;br /&gt;Another option is to let the sender ensure that the message gets delivered to the recipient. Since guaranteed message delivery isn&#39;t a requirement, we can afford to lose messages should the sender go down.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-Soh2smSKhXg/T-bP-1L4EtI/AAAAAAAAAAs/iSMt6QaW7oE/s1600/without-broker.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;111&#34; src=&#34;http://4.bp.blogspot.com/-Soh2smSKhXg/T-bP-1L4EtI/AAAAAAAAAAs/iSMt6QaW7oE/s400/without-broker.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;Using &lt;span class=&#34;Apple-style-span&#34;&gt;ØMQ&#39;s &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;asynchronous socket-like API, we can easily implement this scenario in a few minutes.&lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt; All we need is to submit the message to &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;ØMQ, and &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;ØMQ will deliver the message to the recipient on our behalf.&lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt; &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;However, because &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;ØMQ&lt;/span&gt; has its own protocol, the library must be embedded within the sender and receiver applications.&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;&lt;/span&gt; &lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-yMEaJrA1NTw/T-bMKfhdCoI/AAAAAAAAAAc/wnRXJ9ARTek/s1600/with-zeromq.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://1.bp.blogspot.com/-yMEaJrA1NTw/T-bMKfhdCoI/AAAAAAAAAAc/wnRXJ9ARTek/s1600/with-zeromq.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;This simple example just scratches the surface of what you can do with&amp;nbsp;ØMQ. Real-world applications require the architecture to scale and&amp;nbsp;ØMQ offers building blocks to tackle this challenge. Consult the&amp;nbsp;&lt;a href=&#34;http://zguide.zeromq.org/page:all&#34; target=&#34;_blank&#34;&gt;ØMQ guide&lt;/a&gt; to learn more.&lt;br /&gt;&lt;br /&gt;How does &lt;a href=&#34;http://www.mulesoft.org/&#34; target=&#34;_blank&#34;&gt;Mule&lt;/a&gt;, an integration framework, fit in with&amp;nbsp;ØMQ? Well, one simple use-case is that even though&amp;nbsp;the back-end is talking in ØMQ, the outside world is speaking in a standard language such as HTTP. Mule can serve as the bridge between the outside world and the&amp;nbsp;ØMQ back-end as shown below:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-1Qh9s-cMbck/T-bmdPfVmXI/AAAAAAAAABA/piTeyOZ-fdo/s1600/mule-zeromq.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://1.bp.blogspot.com/-1Qh9s-cMbck/T-bmdPfVmXI/AAAAAAAAABA/piTeyOZ-fdo/s1600/mule-zeromq.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;On my &lt;a href=&#34;https://github.com/claudemamo/mule-transport-zeromq/&#34; target=&#34;_blank&#34;&gt;GitHub page,&lt;/a&gt; you&#39;ll find the first release of the Mule 3 ZeroMQ Transport for ZeroMQ 2.2. This transport frees you from having to know all the details of ØMQ&#39;s API. Furthermore, you don&#39;t need to worry about processing messages concurrently: the transport takes care of that.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-outbound-request-response.xml&#34;&gt;&lt;/script&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;This snippet is all that it takes to implement the bridge in Mule. Those of you who are familiar with&amp;nbsp;&lt;/span&gt;Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ API should find the &lt;i&gt;zeromq:outbound-endpoint&lt;/i&gt; easy to understand. The outbound-endpoint is telling&amp;nbsp;&lt;/span&gt;Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ to &#34;connect&#34; to the receiver 192.168.34.10 listening on port 9090. All of this will happen once, at initialisation time. At run-time, the outbound-endpoint will transform messages to arrays of bytes and send them off to the receiver. Replies are returned by the outbound-endpoint as arrays of bytes.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;The exchange pattern &lt;i&gt;request-response&lt;/i&gt; is just one of several exchange patterns the&amp;nbsp;&lt;/span&gt;Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ transport supports. What if we don&#39;t want to wait for the reply from the back-end? Just set the exchange pattern to &lt;i&gt;one-way&lt;/i&gt;. &lt;/span&gt;ØMQ folks, you may specify &lt;i&gt;push&lt;/i&gt; instead of &lt;i&gt;one-way&lt;/i&gt;. The same code is executed underneath.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-outbound-one-way.xml&#34;&gt;&lt;/script&gt;Of course, it&#39;s quite possible that we have another Mule instance on the other end accepting Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ messages as shown below:&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-inbound-request-response.xml&#34;&gt;&lt;/script&gt;Apart from different exchange patterns (see the project&#39;s &lt;a href=&#34;https://github.com/claudemamo/mule-transport-zeromq/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;&lt;i&gt;README&lt;/i&gt;&lt;/a&gt; for the complete list of supported exchange patterns) and socket operations (i.e., &lt;i&gt;connect&lt;/i&gt; and &lt;i&gt;bind&lt;/i&gt;), the transport also supports multi-part messages. In the event a Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ inbound-endpoint receives a multi-part message, a &lt;i&gt;java.util.List&lt;/i&gt; is spit out. Each element in the list is a byte array representing a message part.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-inbound-multipart.xml&#34;&gt;&lt;/script&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;The outbound-endpoint works a little different when it comes to multi-part messages. To send a multi-part message, the &lt;i&gt;multipart&lt;/i&gt; attribute must be set to true on the outbound-endpoint. Additionally, the message must be a &lt;i&gt;java.util.List&lt;/i&gt; where each element represents a message part.&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-outbound-multipart.xml&#34;&gt;&lt;/script&gt;Let me know how you find this transport and how it may be improved. Code contributions are more than welcome :-). Future releases of the transport will support missing features such as durable sockets so keep an eye on the repo.&lt;/span&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>