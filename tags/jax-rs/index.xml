<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jax Rs on On Code &amp; Design</title>
    <link>https://oncodesign.io/tags/jax-rs/</link>
    <description>Recent content in Jax Rs on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Dec 2012 22:17:00 +0000</lastBuildDate>
    <atom:link href="https://oncodesign.io/tags/jax-rs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Demystifying Apache CXF: A RESTful Hello World App</title>
      <link>https://oncodesign.io/2012/12/20/demystifying-apache-cxf-a-restful-hello-world-app/</link>
      <pubDate>Thu, 20 Dec 2012 22:17:00 +0000</pubDate>
      
      <guid>https://oncodesign.io/2012/12/20/demystifying-apache-cxf-a-restful-hello-world-app/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://opensourcesoftwareandme.blogspot.com/2012/12/demystifying-apache-cxf-hello-world-app.html#.UNNCD4njl7s&#34; target=&#34;_blank&#34;&gt;first post&lt;/a&gt;&amp;nbsp;of this&amp;nbsp;how-to&amp;nbsp;series showed you what it takes to expose a Hello World application as a SOAP over HTTP Web Service using CXF. For this post, I&amp;rsquo;ll show you how to expose the same &lt;a href=&#34;https://github.com/claudemamo/cxf-howto-2&#34; target=&#34;_blank&#34;&gt;app as a RESTful service&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In the Java world, we use JAX-RS for mapping a class to a RESTful service. Giving a RESTful interface to our Hello World app is just a matter of adding JAX-RS annotations to &lt;i&gt;HelloWorldImpl&lt;/i&gt;:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4346702.js?file=HelloWorldImpl.java&#34;&gt;&lt;/script&gt;In the class, I tell the JAX-RS provider (i.e., CXF):&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;HelloWorldImpl&lt;/i&gt; is a resource available on the URL relative path &amp;ldquo;/helloWorld&amp;rdquo; (&lt;i&gt;@Path(&amp;ldquo;/helloWorld&amp;rdquo;)&lt;/i&gt;).&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;the HTTP reply sent back to the client should have the Content-Type set to &amp;ldquo;text/hml&amp;rdquo; (&lt;span class=&#34;s1&#34;&gt;&lt;i&gt;@Produces&lt;/i&gt;&lt;/span&gt;).&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;sayHi&lt;/i&gt; is to be called when the HTTP request is a GET and the relative path is &amp;ldquo;/helloWorld/sayHi/&amp;rdquo; + &lt;a href=&#34;i&amp;gt;&amp;lt;span class=&amp;quot;s1&amp;quot;&amp;gt;@Path&amp;lt;b&amp;gt;(&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;&amp;quot;sayHi/{text}&amp;quot;&amp;lt;span class=&amp;quot;s1&amp;quot;&amp;gt;&amp;lt;b&#34;&gt;variable&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/i&gt;).&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;to bind the URL parameter with the method argument &lt;i&gt;text&lt;/i&gt; (&lt;i&gt;@PathParam&lt;/i&gt;).&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;As in the previous how-to, I&amp;rsquo;m going to deploy the app onto an embedded Jetty server instead of deploying it onto a standalone web container:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4346702.js?file=Server.java&#34;&gt;&lt;/script&gt;&lt;i&gt;RuntimeDelegate.getInstance().createEndpoint(&amp;hellip;)&lt;/i&gt; is a JAX-RS method that returns an unpublished endpoint. It takes in:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;a class responsible for configuring and launching the web server. This class differs across JAX-RS providers. CXF expects this class to be&amp;nbsp;&lt;i&gt;JAXRSServerFactoryBean&lt;/i&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;an object that extends &lt;i&gt;Application&lt;/i&gt;. This user-defined class must return JAX-RS annotated classes responsible for processing client requests. For us, this means returning &lt;i&gt;HelloWorldImpl:&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4346702.js?file=HelloWorldApp.java&#34;&gt;&lt;/script&gt;Back to our&amp;nbsp;&lt;i&gt;Server.java&lt;/i&gt;&amp;nbsp;file, I tell the endpoint to bind&amp;nbsp;the server to the URL &lt;i&gt;&lt;a href=&#34;http://localhost:9000&#34;&gt;http://localhost:9000&lt;/a&gt;&lt;/i&gt;. Then, from the endpoint, I create a &lt;i&gt;org.apache.cxf.endpoint.Server&lt;/i&gt;&amp;nbsp;object and invoke &lt;i&gt;start(&amp;hellip;)&lt;/i&gt; to publish the service. Note that, underneath,&amp;nbsp;&lt;i&gt;org.apache.cxf.endpoint.Server&lt;/i&gt;&amp;nbsp;is a configured Jetty.&amp;nbsp;&lt;/div&gt;&lt;br /&gt;Before testing the service, I add the required CXF libraries to the Java classpath by declaring them as dependencies in project&amp;rsquo;s POM :&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4346702.js?file=pom.xml&#34;&gt;&lt;/script&gt;If you compare this POM with the &lt;a href=&#34;https://gist.github.com/claudemamo/4306173#file-pom-xml&#34; target=&#34;_blank&#34;&gt;POM&lt;/a&gt; of the first how-to, you&amp;rsquo;ll note that now I&amp;rsquo;ve swapped the JAX-WS frontend with the JAX-RS one.&lt;br /&gt;&lt;br /&gt;All that is left is to run the server with the following Maven commands:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/4346702.js?file=run.sh&#34;&gt;&lt;/script&gt;Once the server is up, accessing via your browser the URL &lt;i&gt;&lt;a href=&#34;http://localhost:9000/helloWorld/sayHi/Ricston&#34;&gt;http://localhost:9000/helloWorld/sayHi/Ricston&lt;/a&gt;&lt;/i&gt; should give you &amp;ldquo;Hello Ricston&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>