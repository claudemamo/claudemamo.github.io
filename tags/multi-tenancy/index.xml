<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>multi-tenancy on On Code &amp; Design</title>
    <link>https://oncodesign.io/tags/multi-tenancy/</link>
    <description>Recent content in multi-tenancy on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Sep 2019 09:54:34 +0200</lastBuildDate>
    
	<atom:link href="https://oncodesign.io/tags/multi-tenancy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Scalable Multi-Tenant JDBC Connection Pool</title>
      <link>https://oncodesign.io/2019/09/01/a-scalable-multi-tenant-jdbc-connection-pool/</link>
      <pubDate>Sun, 01 Sep 2019 09:54:34 +0200</pubDate>
      
      <guid>https://oncodesign.io/2019/09/01/a-scalable-multi-tenant-jdbc-connection-pool/</guid>
      <description>Multi-tenancy is a frequent requirement when architecting distributed systems. A question one ought to ask is how will the system restrict a tenantâ€™s use of resources. After all, without restrictions and given a finite amount of resources, letting a tenant run wild on the APIs will certainly degrade the performance of other active tenants. The answer will take different forms depending on which part of the technology stack is discussed. Such a question was posed to me for the data access layer, in particular, how to limit the JDBC database connections a tenant may acquire.</description>
    </item>
    
  </channel>
</rss>