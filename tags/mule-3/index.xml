<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mule 3 on On Code &amp; Design</title>
    <link>https://oncodesign.io/tags/mule-3/</link>
    <description>Recent content in Mule 3 on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jan 2014 14:01:00 +0000</lastBuildDate>
    <atom:link href="https://oncodesign.io/tags/mule-3/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Scaling up Mule with Async Request Handling/Continuations</title>
      <link>https://oncodesign.io/2014/01/07/scaling-up-mule-with-async-request-handling/continuations/</link>
      <pubDate>Tue, 07 Jan 2014 14:01:00 +0000</pubDate>
      
      <guid>https://oncodesign.io/2014/01/07/scaling-up-mule-with-async-request-handling/continuations/</guid>
      <description>&lt;p&gt;Non-blocking I/O servers such as Node.js are appealing because, when compared to blocking I/O servers, they utilise less threads to perform the same tasks under the same load. Less threads mean more efficient use of resources (e.g., smaller memory footprint) and better performance (e.g., reduced no. of context switches between threads). Let&amp;rsquo;s take a stab at having non-blocking I/O behaviour in Mule. Consider the following Mule 3.4 application calling an HTTP service:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/8289429.js?file=mule-config(1).xml&#34;&gt;&lt;/script&gt;Wrapping the&amp;nbsp;&lt;i&gt;async&lt;/i&gt;&amp;nbsp;processor around&amp;nbsp;&lt;i&gt;http:outbound-endpoint&lt;/i&gt;&amp;nbsp;prevents the receiver thread from blocking on the outgoing HTTP call. But this &lt;b&gt;kind&lt;/b&gt; of asynchronous behaviour causes the service&amp;rsquo;s reply to be ignored: certainly not what we want for the common case. Moreover, the&amp;nbsp;&lt;i&gt;async&lt;/i&gt;&amp;nbsp;processor borrows a thread from some thread pool to carry out the blocking HTTP call, preventing the borrowed thread from doing any useful work while being blocked.&lt;br /&gt;&lt;br /&gt;The aforementioned problems can generally be solved by replacing the blocking I/O library with a non-blocking version and&amp;nbsp;&lt;b&gt;&lt;a href=&#34;http://wiki.eclipse.org/Jetty/Feature/Continuations&#34; target=&#34;_blank&#34;&gt;Asynchronous Request Handling&lt;/a&gt;&lt;/b&gt;&amp;nbsp;(a.k.a continuations). Async request handling is a threading model where a thread serving a client request can be suspended and returned to its respective thread pool; free to serve other client requests. Typically the thread would be suspended after sending out a request to a remote service or kicking off a long-running computation. Although the suspended thread has forgotten about the client, the server has not. It knows the client is still waiting for a reply. For this reason, a thread can pick up where the suspended tread has left off and deliver the reply back to the client. Normally this would happen in the context of a callback.&lt;br /&gt;&lt;br /&gt;Awesome! Let&amp;rsquo;s implement this in every place where blocking I/O is present. Not so fast. First, a library supporting a non-blocking alternative to what you already have in your solution must be available. Second, to my knowledge, the only Mule transport that provides async request handling&amp;nbsp;is &lt;a href=&#34;http://www.mulesoft.org/documentation/display/current/Jetty+Transport+Reference&#34; target=&#34;_blank&#34;&gt;Jetty&lt;/a&gt;. So for this to work, the Jetty inbound-endpoint&amp;nbsp;processor must be used as the message source:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/8289429.js?file=mule-config(2).xml&#34;&gt;&lt;/script&gt;Furthermore, as shown above,&amp;nbsp;async&amp;nbsp;request handling&amp;nbsp;must be turned on by setting &lt;i&gt;useContinuations&lt;/i&gt; to true on the&amp;nbsp;Jetty connector.&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;Calling an HTTP service is a fine example where we can put async&amp;nbsp;request handling to good use. The initial step is to find an HTTP client library implementing a non-blocking API [1]. I&amp;rsquo;ll opt for &lt;a href=&#34;http://hc.apache.org/httpcomponents-asyncclient-4.0.x/&#34; target=&#34;_blank&#34;&gt;Apache&amp;nbsp;HttpAsyncClient&lt;/a&gt;.&lt;/div&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;The next step is to develop a message processor that (1) uses HttpAsyncClient to call a service, (2) registers a callback to resume processing of the client request on receiving the HTTP service reply, and (3) immediately returns the thread to its thread pool upon sending asynchronously the HTTP request. Such a processor will require special abilities so I&amp;rsquo;ll extend my processor from&amp;nbsp;&lt;i&gt;&lt;a href=&#34;http://www.mulesoft.org/docs/site/current3/apidocs/org/mule/processor/AbstractInterceptingMessageProcessor.html&#34; target=&#34;_blank&#34;&gt;AbstractInterceptingMessageProcessor&lt;/a&gt;&lt;/i&gt;:&lt;/div&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/8289429.js?file=AhcProcessor(1).java&#34;&gt;&lt;/script&gt;By inheriting from &lt;i&gt;AbstractInterceptingMessageProcessor&lt;/i&gt;, I can invoke the next processor in the flow from my callback. Speaking of callbacks, here is the snippet concerning the HTTP client:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/8289429.js?file=AhcProcessor(2).java&#34;&gt;&lt;/script&gt;Lines 10-13 initialise the HTTP client and set the server address to wherever we&amp;rsquo;re going to send the request to. Line 15 sends asynchronously the request, and registers the callback that will handle the reply. Other than the usual stuff of reading from the response stream (lines 19-22), observe that on line 23 the subsequent flow processor in invoked on a&amp;nbsp;&lt;b&gt;different&lt;/b&gt;&amp;nbsp;thread. Line 24 tells Jetty that the flow&amp;rsquo;s output message is to be used as the reply for the end-user.&lt;br /&gt;&lt;br /&gt;One additional item in the list is left: freeing the thread after invoking asynchronously the HTTP client&amp;rsquo;s &lt;i&gt;execute(&amp;hellip;)&lt;/i&gt; method. Returning &lt;i&gt;null&lt;/i&gt; from the &lt;i&gt;process(&amp;hellip;)&lt;/i&gt; method will do the job (line 40):&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/8289429.js?file=AhcProcessor(3).java&#34;&gt;&lt;/script&gt;Finally, we can hook up everything together:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/8289429.js?file=mule-config(3).xml&#34;&gt;&lt;/script&gt;The &lt;a href=&#34;https://github.com/claudemamo/asynchronous-request-handling&#34; target=&#34;_blank&#34;&gt;complete example&lt;/a&gt; is found on GitHub.&lt;br /&gt;&lt;br /&gt;Hopefully async request handling will someday be &lt;a href=&#34;https://www.mulesoft.org/jira/browse/MULE-7214&#34; target=&#34;_blank&#34;&gt;part of Mule&amp;rsquo;s&amp;nbsp;default behaviour&lt;/a&gt;. Imagine how useful it would be to call almost any service (e.g., HTTP, JMS, VM) synchronously knowing fully well that behind the scenes Mule is taking care of making every remote call non-blocking.&lt;br /&gt;&lt;br /&gt;&lt;span style=&#34;font-family: Times, Times New Roman, serif; font-size: small;&#34;&gt;&lt;span class=&#34;num&#34;&gt;1:&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;text-align: justify;&#34;&gt;A client library implementation should be based on the &lt;a href=&#34;http://www.dre.vanderbilt.edu/~schmidt/PDF/reactor-siemens.pdf&#34; target=&#34;_blank&#34;&gt;Reactor pattern&lt;/a&gt; otherwise we would be going back to the original problem of many blocking threads.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mule ZeroMQ Transport: Lightweight RPC with ØMQ and Protocol Buffers</title>
      <link>https://oncodesign.io/2012/11/06/mule-zeromq-transport-lightweight-rpc-with-%C3%B8mq-and-protocol-buffers/</link>
      <pubDate>Tue, 06 Nov 2012 22:12:00 +0000</pubDate>
      
      <guid>https://oncodesign.io/2012/11/06/mule-zeromq-transport-lightweight-rpc-with-%C3%B8mq-and-protocol-buffers/</guid>
      <description>&lt;p&gt;Check out John D&amp;rsquo;Emic&amp;rsquo;s awesome&amp;nbsp;&lt;a href=&#34;http://blogs.mulesoft.org/lightweight-rpc-with-%C3%B8mq-and-protocol-buffers/&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt; demonstrating how&amp;nbsp;ØMQ and Mule could be used for exchanging stock quote data between a front-end and back-end application.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up a Mule Proxy to Validate SOAP Requests</title>
      <link>https://oncodesign.io/2012/10/12/setting-up-a-mule-proxy-to-validate-soap-requests/</link>
      <pubDate>Fri, 12 Oct 2012 12:01:00 +0000</pubDate>
      
      <guid>https://oncodesign.io/2012/10/12/setting-up-a-mule-proxy-to-validate-soap-requests/</guid>
      <description>&lt;p&gt;&lt;span style=&#34;background-color: white; color: dimgrey; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 15px; line-height: 20px;&#34;&gt;Check out my latest post on the Ricston blog:&amp;nbsp;&lt;/span&gt;&lt;a href=&#34;http://ricston.com/blog/?p=2856&#34; style=&#34;background-color: white; color: #7aa5d2; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 15px; line-height: 20px; text-decoration: none;&#34;&gt;Setting up a Mule Proxy to Validate SOAP Requests&lt;/a&gt;&lt;span style=&#34;background-color: white; color: dimgrey; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 15px; line-height: 20px;&#34;&gt;.&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rest Module: A lightweight alternative to Mule’s Jersey Module</title>
      <link>https://oncodesign.io/2012/07/18/rest-module-a-lightweight-alternative-to-mules-jersey-module/</link>
      <pubDate>Wed, 18 Jul 2012 09:55:00 +0000</pubDate>
      
      <guid>https://oncodesign.io/2012/07/18/rest-module-a-lightweight-alternative-to-mules-jersey-module/</guid>
      <description>&lt;p&gt;Check out my latest post on the Ricston blog:&amp;nbsp;&lt;a href=&#34;http://ricston.com/blog/?p=2607#.UAZsIgsjA5E.blogger&#34;&gt;Rest Module: A lightweight alternative to Mule’s Jersey Module&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mule meet ZeroMQ. ZeroMQ meet Mule.</title>
      <link>https://oncodesign.io/2012/06/24/mule-meet-zeromq.-zeromq-meet-mule./</link>
      <pubDate>Sun, 24 Jun 2012 19:17:00 +0000</pubDate>
      
      <guid>https://oncodesign.io/2012/06/24/mule-meet-zeromq.-zeromq-meet-mule./</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;These past few weeks I&#39;ve been experimenting with &lt;a href=&#34;http://www.zeromq.org/&#34; target=&#34;_blank&#34;&gt;ZeroMQ&lt;/a&gt;&amp;nbsp;(a.k.a. ØMQ or ZMQ). I like the idea of a library that provides you the building blocks for constructing your own messaging architecture. For example, we may want to send messages to an application that might be unavailable at times. In our system, losing some messages isn&#39;t the end of the world so we don&#39;t need to have a high degree of message reliability. A common solution for this type of problem&amp;nbsp;is to introduce a message broker, such as ActiveMQ, and let the broker worry about making sure that messages are eventually delivered to the recipient. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-jvsiYKjXCGI/T-bQS0ma4VI/AAAAAAAAAA0/sxARfTv_WYU/s1600/broker.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-jvsiYKjXCGI/T-bQS0ma4VI/AAAAAAAAAA0/sxARfTv_WYU/s1600/broker.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;The main disadvantage of this approach is that a broker adds another hop to the path of the message. Also, a broker is another point in your distributed system where things could go wrong.&lt;br /&gt;&lt;br /&gt;Another option is to let the sender ensure that the message gets delivered to the recipient. Since guaranteed message delivery isn&#39;t a requirement, we can afford to lose messages should the sender go down.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-Soh2smSKhXg/T-bP-1L4EtI/AAAAAAAAAAs/iSMt6QaW7oE/s1600/without-broker.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;111&#34; src=&#34;http://4.bp.blogspot.com/-Soh2smSKhXg/T-bP-1L4EtI/AAAAAAAAAAs/iSMt6QaW7oE/s400/without-broker.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;Using &lt;span class=&#34;Apple-style-span&#34;&gt;ØMQ&#39;s &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;asynchronous socket-like API, we can easily implement this scenario in a few minutes.&lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt; All we need is to submit the message to &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;ØMQ, and &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;ØMQ will deliver the message to the recipient on our behalf.&lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt; &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;However, because &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;ØMQ&lt;/span&gt; has its own protocol, the library must be embedded within the sender and receiver applications.&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;&lt;/span&gt; &lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-yMEaJrA1NTw/T-bMKfhdCoI/AAAAAAAAAAc/wnRXJ9ARTek/s1600/with-zeromq.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://1.bp.blogspot.com/-yMEaJrA1NTw/T-bMKfhdCoI/AAAAAAAAAAc/wnRXJ9ARTek/s1600/with-zeromq.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;This simple example just scratches the surface of what you can do with&amp;nbsp;ØMQ. Real-world applications require the architecture to scale and&amp;nbsp;ØMQ offers building blocks to tackle this challenge. Consult the&amp;nbsp;&lt;a href=&#34;http://zguide.zeromq.org/page:all&#34; target=&#34;_blank&#34;&gt;ØMQ guide&lt;/a&gt; to learn more.&lt;br /&gt;&lt;br /&gt;How does &lt;a href=&#34;http://www.mulesoft.org/&#34; target=&#34;_blank&#34;&gt;Mule&lt;/a&gt;, an integration framework, fit in with&amp;nbsp;ØMQ? Well, one simple use-case is that even though&amp;nbsp;the back-end is talking in ØMQ, the outside world is speaking in a standard language such as HTTP. Mule can serve as the bridge between the outside world and the&amp;nbsp;ØMQ back-end as shown below:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-1Qh9s-cMbck/T-bmdPfVmXI/AAAAAAAAABA/piTeyOZ-fdo/s1600/mule-zeromq.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://1.bp.blogspot.com/-1Qh9s-cMbck/T-bmdPfVmXI/AAAAAAAAABA/piTeyOZ-fdo/s1600/mule-zeromq.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;On my &lt;a href=&#34;https://github.com/claudemamo/mule-transport-zeromq/&#34; target=&#34;_blank&#34;&gt;GitHub page,&lt;/a&gt; you&#39;ll find the first release of the Mule 3 ZeroMQ Transport for ZeroMQ 2.2. This transport frees you from having to know all the details of ØMQ&#39;s API. Furthermore, you don&#39;t need to worry about processing messages concurrently: the transport takes care of that.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-outbound-request-response.xml&#34;&gt;&lt;/script&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;This snippet is all that it takes to implement the bridge in Mule. Those of you who are familiar with&amp;nbsp;&lt;/span&gt;Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ API should find the &lt;i&gt;zeromq:outbound-endpoint&lt;/i&gt; easy to understand. The outbound-endpoint is telling&amp;nbsp;&lt;/span&gt;Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ to &#34;connect&#34; to the receiver 192.168.34.10 listening on port 9090. All of this will happen once, at initialisation time. At run-time, the outbound-endpoint will transform messages to arrays of bytes and send them off to the receiver. Replies are returned by the outbound-endpoint as arrays of bytes.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;The exchange pattern &lt;i&gt;request-response&lt;/i&gt; is just one of several exchange patterns the&amp;nbsp;&lt;/span&gt;Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ transport supports. What if we don&#39;t want to wait for the reply from the back-end? Just set the exchange pattern to &lt;i&gt;one-way&lt;/i&gt;. &lt;/span&gt;ØMQ folks, you may specify &lt;i&gt;push&lt;/i&gt; instead of &lt;i&gt;one-way&lt;/i&gt;. The same code is executed underneath.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-outbound-one-way.xml&#34;&gt;&lt;/script&gt;Of course, it&#39;s quite possible that we have another Mule instance on the other end accepting Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ messages as shown below:&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-inbound-request-response.xml&#34;&gt;&lt;/script&gt;Apart from different exchange patterns (see the project&#39;s &lt;a href=&#34;https://github.com/claudemamo/mule-transport-zeromq/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;&lt;i&gt;README&lt;/i&gt;&lt;/a&gt; for the complete list of supported exchange patterns) and socket operations (i.e., &lt;i&gt;connect&lt;/i&gt; and &lt;i&gt;bind&lt;/i&gt;), the transport also supports multi-part messages. In the event a Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ inbound-endpoint receives a multi-part message, a &lt;i&gt;java.util.List&lt;/i&gt; is spit out. Each element in the list is a byte array representing a message part.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-inbound-multipart.xml&#34;&gt;&lt;/script&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;The outbound-endpoint works a little different when it comes to multi-part messages. To send a multi-part message, the &lt;i&gt;multipart&lt;/i&gt; attribute must be set to true on the outbound-endpoint. Additionally, the message must be a &lt;i&gt;java.util.List&lt;/i&gt; where each element represents a message part.&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-outbound-multipart.xml&#34;&gt;&lt;/script&gt;Let me know how you find this transport and how it may be improved. Code contributions are more than welcome :-). Future releases of the transport will support missing features such as durable sockets so keep an eye on the repo.&lt;/span&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mule ISO 8583 Module</title>
      <link>https://oncodesign.io/2012/06/13/mule-iso-8583-module/</link>
      <pubDate>Wed, 13 Jun 2012 11:09:00 +0000</pubDate>
      
      <guid>https://oncodesign.io/2012/06/13/mule-iso-8583-module/</guid>
      <description>&lt;p&gt;Check out my latest post on the Ricston blog: &lt;a href=&#34;http://ricston.com/blog/?p=2508#.T9hYx4HZsCE.blogger&#34; target=&#34;_blank&#34;&gt;Mule ISO 8583 Module&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Revisiting Dynamic Ports in Mule 3</title>
      <link>https://oncodesign.io/2012/05/28/revisiting-dynamic-ports-in-mule-3/</link>
      <pubDate>Mon, 28 May 2012 20:43:00 +0000</pubDate>
      
      <guid>https://oncodesign.io/2012/05/28/revisiting-dynamic-ports-in-mule-3/</guid>
      <description>&lt;p&gt;Daniel Zapata wrote an interesting&amp;nbsp;&lt;a href=&#34;http://blogs.mulesoft.org/dynamic-port-testing-in-mule-3&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt; about using dynamic ports when testing your Mule 3 application. Since then, subsequent releases of Mule included support for JUnit 4 which meant improved flexibility in terms of dynamic ports.&lt;br /&gt;&lt;br /&gt;Before JUnit 4, an annoying problem with dynamic ports was that you were limited to property placeholder names having the following pattern: &amp;lsquo;port&amp;rsquo; +&amp;nbsp;&lt;i&gt;n&lt;/i&gt; where n is an integer. For example:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2820059.js?file=mule-config.xml&#34;&gt;&lt;/script&gt;Using JUnit 4, this problem is solved by leveraging the &lt;i&gt;Rule&lt;/i&gt; annotation and the &lt;i&gt;DynamicPort&lt;/i&gt; class. We&amp;rsquo;ll see how this is done. Let&amp;rsquo;s create a simple Mule config for testing dynamic ports out:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2820059.js?file=dynamic-port-junit4-functional-test-config.xml&#34;&gt;&lt;/script&gt;Notice the property placeholder &amp;ldquo;${foo}&amp;rdquo; in the &lt;i&gt;port&lt;/i&gt; attribute. The next step is to create a test case for the config. The test case &lt;b&gt;must&lt;/b&gt; extend &lt;i&gt;org.mule.tck.junit4.FunctionalTestCase&lt;/i&gt; for this to work:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2820059.js?file=DynamicPortJunit4TestCase.java&#34;&gt;&lt;/script&gt;The &lt;i&gt;port&lt;/i&gt; variable declaration is what we&amp;rsquo;re interested in. &lt;i&gt;@Rule&lt;/i&gt; instructs JUnit to execute code in the&amp;nbsp;&lt;i&gt;DynamicPort&lt;/i&gt;&amp;nbsp;object before running the test. The code will:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Find an unused port,&lt;/li&gt;&lt;li&gt;Search the Mule config for a placeholder with the name &amp;lsquo;foo&amp;rsquo;, and then&lt;/li&gt;&lt;li&gt;Replace the placeholder with the unused port number.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;The newly assigned port no. is retrieved using the &lt;i&gt;getNumber()&lt;/i&gt; method of the &lt;i&gt;DynamicPort&lt;/i&gt; class. The complete example can be found on &lt;a href=&#34;https://github.com/claudemamo/dynamic-port-junit4&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>