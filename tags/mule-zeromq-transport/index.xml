<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mule Zeromq Transport on On Code &amp; Design</title>
    <link>https://claudemamo.github.io/tags/mule-zeromq-transport/</link>
    <description>Recent content in Mule Zeromq Transport on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Aug 2013 17:36:00 +0000</lastBuildDate>
    <atom:link href="https://claudemamo.github.io/tags/mule-zeromq-transport/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bridging Mule and MSMQ with ZeroMQ</title>
      <link>https://claudemamo.github.io/2013/08/27/bridging-mule-and-msmq-with-zeromq/</link>
      <pubDate>Tue, 27 Aug 2013 17:36:00 +0000</pubDate>
      
      <guid>https://claudemamo.github.io/2013/08/27/bridging-mule-and-msmq-with-zeromq/</guid>
      <description>&lt;p&gt;Hearing the words Mule and Microsoft&amp;rsquo;s MSMQ in the same sentence sends a shiver down my spine. I remember once, Mule guru &lt;a href=&#34;http://blogs.mulesoft.org/author/john-demic/&#34; target=&#34;_blank&#34;&gt;John D&amp;rsquo;Emic&lt;/a&gt; and me had spent a considerable amount of time and patience getting Mule and MSMQ to talk to each other through DCOM. The major factor that contributed to this unpleasant experience was our ignorance of the numerous security measures imposed by Windows to restrict DCOM access. The morale of this story is unless you have a veteran Windows administrator at your disposal, avoid the DCOM route.&lt;br /&gt;&lt;br /&gt;So which choices do we have other than DCOM? JNI sounds promising but you are then sacrificing Mule&amp;rsquo;s platform independence. Here&amp;rsquo;s an idea: introduce a &lt;a href=&#34;http://www.eaipatterns.com/MessagingBridge.html&#34; target=&#34;_blank&#34;&gt;messaging bridge&lt;/a&gt; between Mule and MSMQ. The bridge can be implemented in any language that facilitates interaction with MSMQ. C# is an attractive option.&lt;br /&gt;&lt;br /&gt;We still have to consider which middleware to use for exchanging messages between the bridge and Mule. There are many alternatives and among them is &lt;a href=&#34;http://zeromq.org/&#34; target=&#34;_blank&#34;&gt;ZeroMQ&lt;/a&gt;. I think ZeroMQ is a good candidate for several reasons:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;It supports asynchronous communication&lt;/li&gt;&lt;li&gt;You&amp;rsquo;re not adding another component to your architecture&lt;/li&gt;&lt;li&gt;It&amp;rsquo;s well documented in addition to having a low learning curve&lt;/li&gt;&lt;li&gt;A ZeroMQ&amp;nbsp;&lt;a href=&#34;https://github.com/claudemamo/mule-transport-zeromq&#34; target=&#34;_blank&#34;&gt;transport&lt;/a&gt; [1] and &lt;a href=&#34;https://github.com/zeromq/clrzmq&#34; target=&#34;_blank&#34;&gt;binding&lt;/a&gt;&amp;nbsp;are available for Mule and C# respectively&lt;/li&gt;&lt;li&gt;It will more than likely satisfy your message throughput requirements&lt;/li&gt;&lt;/ul&gt;In as little as 15 minutes I developed a simple bridge in C#:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6345631.js?file=bridge.cs&#34;&gt;&lt;/script&gt; The above code should be self-explanatory but I&amp;rsquo;ve put comments for your convenience.&lt;br /&gt;&lt;br /&gt;Here&amp;rsquo;s the Mule 3 app dispatching messages to the bridge:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/6345631.js?file=mule-config.xml&#34;&gt;&lt;/script&gt;On receiving an HTTP request, Mule leverages the ZeroMQ transport to send asynchronously the request&amp;rsquo;s payload to the bridge.&lt;br /&gt;&lt;br /&gt;In all likelihood, the illustrated bridge code for Mule-MSMQ interoperability won&amp;rsquo;t serve all your needs. I can think about a dozen features that a developer would want such as destination queues resolved at run-time, an agreed format for message content, and etc. But hey, at least it&amp;rsquo;s a start :-)&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;span style=&#34;font-family: Times, Times New Roman, serif; font-size: small;&#34;&gt;&lt;span class=&#34;num&#34;&gt;1:&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;font-family: Times, Times New Roman, serif;&#34;&gt;I&amp;rsquo;ve recently replaced the transport&amp;rsquo;s ZeroMQ C++ library with a &lt;a href=&#34;https://github.com/zeromq/jeromq&#34; target=&#34;_blank&#34;&gt;pure Java implementation&lt;/a&gt; of ZeroMQ.&lt;/span&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mule ZeroMQ Transport: Lightweight RPC with ØMQ and Protocol Buffers</title>
      <link>https://claudemamo.github.io/2012/11/06/mule-zeromq-transport-lightweight-rpc-with-%C3%B8mq-and-protocol-buffers/</link>
      <pubDate>Tue, 06 Nov 2012 22:12:00 +0000</pubDate>
      
      <guid>https://claudemamo.github.io/2012/11/06/mule-zeromq-transport-lightweight-rpc-with-%C3%B8mq-and-protocol-buffers/</guid>
      <description>&lt;p&gt;Check out John D&amp;rsquo;Emic&amp;rsquo;s awesome&amp;nbsp;&lt;a href=&#34;http://blogs.mulesoft.org/lightweight-rpc-with-%C3%B8mq-and-protocol-buffers/&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt; demonstrating how&amp;nbsp;ØMQ and Mule could be used for exchanging stock quote data between a front-end and back-end application.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mule meet ZeroMQ. ZeroMQ meet Mule.</title>
      <link>https://claudemamo.github.io/2012/06/24/mule-meet-zeromq.-zeromq-meet-mule./</link>
      <pubDate>Sun, 24 Jun 2012 19:17:00 +0000</pubDate>
      
      <guid>https://claudemamo.github.io/2012/06/24/mule-meet-zeromq.-zeromq-meet-mule./</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;These past few weeks I&#39;ve been experimenting with &lt;a href=&#34;http://www.zeromq.org/&#34; target=&#34;_blank&#34;&gt;ZeroMQ&lt;/a&gt;&amp;nbsp;(a.k.a. ØMQ or ZMQ). I like the idea of a library that provides you the building blocks for constructing your own messaging architecture. For example, we may want to send messages to an application that might be unavailable at times. In our system, losing some messages isn&#39;t the end of the world so we don&#39;t need to have a high degree of message reliability. A common solution for this type of problem&amp;nbsp;is to introduce a message broker, such as ActiveMQ, and let the broker worry about making sure that messages are eventually delivered to the recipient. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-jvsiYKjXCGI/T-bQS0ma4VI/AAAAAAAAAA0/sxARfTv_WYU/s1600/broker.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-jvsiYKjXCGI/T-bQS0ma4VI/AAAAAAAAAA0/sxARfTv_WYU/s1600/broker.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;br /&gt;The main disadvantage of this approach is that a broker adds another hop to the path of the message. Also, a broker is another point in your distributed system where things could go wrong.&lt;br /&gt;&lt;br /&gt;Another option is to let the sender ensure that the message gets delivered to the recipient. Since guaranteed message delivery isn&#39;t a requirement, we can afford to lose messages should the sender go down.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-Soh2smSKhXg/T-bP-1L4EtI/AAAAAAAAAAs/iSMt6QaW7oE/s1600/without-broker.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;111&#34; src=&#34;http://4.bp.blogspot.com/-Soh2smSKhXg/T-bP-1L4EtI/AAAAAAAAAAs/iSMt6QaW7oE/s400/without-broker.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;Using &lt;span class=&#34;Apple-style-span&#34;&gt;ØMQ&#39;s &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;asynchronous socket-like API, we can easily implement this scenario in a few minutes.&lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt; All we need is to submit the message to &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;ØMQ, and &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;ØMQ will deliver the message to the recipient on our behalf.&lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt; &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;However, because &lt;/span&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;ØMQ&lt;/span&gt; has its own protocol, the library must be embedded within the sender and receiver applications.&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;&lt;/span&gt; &lt;br /&gt;&lt;div style=&#34;text-align: justify;&#34;&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-yMEaJrA1NTw/T-bMKfhdCoI/AAAAAAAAAAc/wnRXJ9ARTek/s1600/with-zeromq.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://1.bp.blogspot.com/-yMEaJrA1NTw/T-bMKfhdCoI/AAAAAAAAAAc/wnRXJ9ARTek/s1600/with-zeromq.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;This simple example just scratches the surface of what you can do with&amp;nbsp;ØMQ. Real-world applications require the architecture to scale and&amp;nbsp;ØMQ offers building blocks to tackle this challenge. Consult the&amp;nbsp;&lt;a href=&#34;http://zguide.zeromq.org/page:all&#34; target=&#34;_blank&#34;&gt;ØMQ guide&lt;/a&gt; to learn more.&lt;br /&gt;&lt;br /&gt;How does &lt;a href=&#34;http://www.mulesoft.org/&#34; target=&#34;_blank&#34;&gt;Mule&lt;/a&gt;, an integration framework, fit in with&amp;nbsp;ØMQ? Well, one simple use-case is that even though&amp;nbsp;the back-end is talking in ØMQ, the outside world is speaking in a standard language such as HTTP. Mule can serve as the bridge between the outside world and the&amp;nbsp;ØMQ back-end as shown below:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-1Qh9s-cMbck/T-bmdPfVmXI/AAAAAAAAABA/piTeyOZ-fdo/s1600/mule-zeromq.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://1.bp.blogspot.com/-1Qh9s-cMbck/T-bmdPfVmXI/AAAAAAAAABA/piTeyOZ-fdo/s1600/mule-zeromq.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;On my &lt;a href=&#34;https://github.com/claudemamo/mule-transport-zeromq/&#34; target=&#34;_blank&#34;&gt;GitHub page,&lt;/a&gt; you&#39;ll find the first release of the Mule 3 ZeroMQ Transport for ZeroMQ 2.2. This transport frees you from having to know all the details of ØMQ&#39;s API. Furthermore, you don&#39;t need to worry about processing messages concurrently: the transport takes care of that.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-outbound-request-response.xml&#34;&gt;&lt;/script&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;This snippet is all that it takes to implement the bridge in Mule. Those of you who are familiar with&amp;nbsp;&lt;/span&gt;Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ API should find the &lt;i&gt;zeromq:outbound-endpoint&lt;/i&gt; easy to understand. The outbound-endpoint is telling&amp;nbsp;&lt;/span&gt;Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ to &#34;connect&#34; to the receiver 192.168.34.10 listening on port 9090. All of this will happen once, at initialisation time. At run-time, the outbound-endpoint will transform messages to arrays of bytes and send them off to the receiver. Replies are returned by the outbound-endpoint as arrays of bytes.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;The exchange pattern &lt;i&gt;request-response&lt;/i&gt; is just one of several exchange patterns the&amp;nbsp;&lt;/span&gt;Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ transport supports. What if we don&#39;t want to wait for the reply from the back-end? Just set the exchange pattern to &lt;i&gt;one-way&lt;/i&gt;. &lt;/span&gt;ØMQ folks, you may specify &lt;i&gt;push&lt;/i&gt; instead of &lt;i&gt;one-way&lt;/i&gt;. The same code is executed underneath.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-outbound-one-way.xml&#34;&gt;&lt;/script&gt;Of course, it&#39;s quite possible that we have another Mule instance on the other end accepting Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ messages as shown below:&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-inbound-request-response.xml&#34;&gt;&lt;/script&gt;Apart from different exchange patterns (see the project&#39;s &lt;a href=&#34;https://github.com/claudemamo/mule-transport-zeromq/blob/master/README.md&#34; target=&#34;_blank&#34;&gt;&lt;i&gt;README&lt;/i&gt;&lt;/a&gt; for the complete list of supported exchange patterns) and socket operations (i.e., &lt;i&gt;connect&lt;/i&gt; and &lt;i&gt;bind&lt;/i&gt;), the transport also supports multi-part messages. In the event a Ø&lt;span class=&#34;Apple-style-span&#34;&gt;MQ inbound-endpoint receives a multi-part message, a &lt;i&gt;java.util.List&lt;/i&gt; is spit out. Each element in the list is a byte array representing a message part.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-inbound-multipart.xml&#34;&gt;&lt;/script&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;The outbound-endpoint works a little different when it comes to multi-part messages. To send a multi-part message, the &lt;i&gt;multipart&lt;/i&gt; attribute must be set to true on the outbound-endpoint. Additionally, the message must be a &lt;i&gt;java.util.List&lt;/i&gt; where each element represents a message part.&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34;&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/claudemamo/2941235.js?file=mule-config-outbound-multipart.xml&#34;&gt;&lt;/script&gt;Let me know how you find this transport and how it may be improved. Code contributions are more than welcome :-). Future releases of the transport will support missing features such as durable sockets so keep an eye on the repo.&lt;/span&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>